const Discord = require("discord.js");
const fs = require("fs");
const client = new Discord.Client();
let p = "tess!"
let id2 = '<@405258156063850497>'


client.on('ready', () => {

/*
class Reminder 
{ 
  constructor(timeString, callback)
  {
       this.remindHandler = callback;
       let timeArray = timeString.split(':');
       this.hours = parseInt(timeArray[0]);
       this.minutes = parseInt(timeArray [1]);
       this.updateTimer();
}

updateTimer()
{
    let now = new Date();

   let remindTime = new Date();
   remindTime.setHours(this.hours);
   remindTime.setMinutes(this.minutes);

   if(now.getTime() == remindTime.getTime()) this.remindHandler();
   if(now >= remindTime ) remindTime.setDate(remindTime.getDate() + 1);

console.log('time to reminder: ' + (remindTime - now));

setTimeout(this.updateTimer.bind(this), remindTime - now);
}
}
//9:15
let reminder = new Reminder('9:15', () => {

client.fetchWebhook('620966467994779658', 'g-yVItRDXMdx1TkfhsGIU3f6WYUy8R-OsU6MDe82I4WqQsTnx4q8bG1R3ll27mdnHdAX').then(webhook => {
			webhook.send("@everyone, –¥–æ –º–∏—Ä–æ–≤–æ–≥–æ –±–æ—Å—Å–∞ –æ—Å—Ç–∞–ª–æ—Å—å 15 –º–∏–Ω—É—Ç")
 });


});
*/
    client.user.setActivity('Battlefield 4',{
  type: "PLAYING"
  //url: "https://www.twitch.tv/monstercat"
});
    console.log('–Ø –ù–ï –ï–ë–ù–£–õ–°–Ø') 
});

client.on('guildMemberAdd', member => {
    member.guild.channels.get('channelID').send("Welcome"); 
});

client.on('message', message => {
  if (message.content === (p + 'ping')) {
message.channel.send('Pinging...').then(sent => {
    sent.edit(`Pong! Took ${sent.createdTimestamp - message.createdTimestamp}ms`);
	console.log('–ö—Ç–æ —Ç–æ —É–∑–Ω–∞–ª –ø–∏–Ω–≥ –±–æ—Ç–∞!')
    });
  }
});



client.on('message', message => {
	if(message.content.startsWith(p + 'avatar')) {
try {
let mentions1 = message.mentions
		const embed = new Discord.RichEmbed()
		.setTitle('–ê–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:')
            .setColor('RANDOM')
		 .setImage(message.mentions.users.first().avatarURL)
		 message.channel.send({embed})
		console.log(`–ø–æ–∫–∞–∑–∞–ª –∞–≤–∞—Ç–∞—Ä ${mentions1[0]} –¥–ª—è ${message.author.displayName} –≤ ${message.guild.name}`)
} catch (err) {
message.channel.send('–¢—ã —É–≤–µ—Ä–µ–Ω —á—Ç–æ —ç—Ç–æ —á–µ–ª–æ–≤–µ–∫ –∏–º–µ–µ—Ç –∞–≤–∞—Ç–∞—Ä–∫—É?')
		}
	}
});

client.on("message",(message) =>

	{  

	    if(message.content.startsWith(p + 'inv')) {
                 message.delete()
	    {
	        message.channel.createInvite({temporary : true})

	       .then(inv =>message.channel.sendMessage (`https://discord.gg/${inv.code} `));                   

	    }
}
	});
	 
/*
client.on("messageDelete", (msg) => {	
  if (typeof msg.content !== 'undefined'){	
    let date = new Date(msg.timestamp);	
    if (typeof msg.attachments[0] !== 'undefined'){	
	console.log('–ö–∏–Ω—É–ª –≤ –ª—Å —É–¥–∞–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')	
      client.users.get("405258156063850497").send(`–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${msg.author.username}, –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–µ ${date.toUTCString()}: "${msg.content}". –ö —Å–æ–æ–±—â–µ–Ω–∏—é –±—ã–ª–æ —á—Ç–æ-—Ç–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ.`);	
    } else {	
      client.users.get("405258156063850497").send(`–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${msg.author.username}, –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–µ ${date.toUTCString()}: "${msg.content}".`);	
    };	
  } else {	
    client.users.get("405258156063850497").send("–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.");	
  };	
});                                    
*/
/*
client.on('message', message => {
         if(message.content.includes(id2)) {         
if(message.author.bot) return;
                       

client.users.get("405258156063850497").send(`${message.author.username} —É–ø–æ–º—è–Ω—É–ª –≤–∞—Å \n  –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: ${message.content}`)



               
        }

    

 });
*/
client.on('message', message => {
	if(message.content === (p + 'logo')) {
try {
	const embed = new Discord.RichEmbed()
		.setTitle('–õ–æ–≥–æ—Ç–∏–ø —Å–µ—Ä–≤–µ—Ä–∞')
            .setColor('RANDOM')
		.setImage(message.guild.iconURL)
		 message.channel.send({embed})
		console.log(`–ø–æ–∫–∞–∑–∞–ª –ª–æ–≥–æ—Ç–∏–ø —Å–µ—Ä–≤–µ—Ä–∞ ${message.guild.name} –¥–ª—è ${message.author.displayName}`)
} catch (err) {
message.channel.send('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤–æ–∑–º–æ–∂–Ω–æ, –≤—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –∫—Ä–∞—à–Ω—É—Ç—å –±–æ—Ç–∞ :D')
		}
	}
});

client.on('message', message => {
    if(message.content.startsWith(p + 'afk on')) {
        const embed = new Discord.RichEmbed()
            .setTitle("AFK")
            .setColor("#00BFFF")
            .setDescription('–í–æ—à(–µ)–ª(–∞) –≤ AFK,–Ω–µ –º–µ—à–∞–π—Ç–µ.')
            .setFooter("AFK|Tess bot")
            .setTimestamp();
            message.reply({embed}).then(sentMessage => {
                sentMessage.react('üîú')    
                    .catch(() => console.error('One of the emojis failed to react1.'));
            });
            }
});
 
    client.on('message', message => {
        if(message.content.startsWith(p + 'afk off')) {
            const embed = new Discord.RichEmbed()
                .setTitle("AFK")
                .setColor("#00BFFF")
                .setDescription('–í—ã—à(–µ)–ª(–∞) –∏–∑ AFK,—Ç–µ–ø–µ—Ä—å –æ–Ω(–∞) —Å –Ω–∞–º–∏.')
                .setFooter("AFK|Tess bot")
                .setTimestamp();
                message.reply({embed}).then(sentMessage => {
                    sentMessage.react('üîô')
                });     
            }
        });

client.on('message', message => {
    if(message.content.startsWith(p + 'help')) {
    message.channel.send("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–∞–Ω–¥...");
function msdl() {
message.channel.bulkDelete(1)
}
setTimeout(msdl, 1000);

function ls() {
message.channel.send("–Ø –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–±–µ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
}
setTimeout(ls, 1000);

function helpS() {  
        const embed = new Discord.RichEmbed()
            .setTitle("–ü–æ–º–æ—â—å")
            .setColor("#00BFFF")
            .setDescription('–ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã \n **tess!help** - –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ \n **tess!afk on** - –≤–æ–π—Ç–∏ –≤ AFK \n **tess!afk off** - –≤—ã–π—Ç–∏ –∏–∑ AFK \n **tess!logo** - —Å—Ç—ã—Ä–∏—Ç—å –ª–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ \n **tess!avatar** - —Å—Ç—ã—Ä–∏—Ç—å –∞–≤—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è \n ***–≠—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –±—É–¥–µ—Ç –¥–æ–ø–æ–ª–Ω—è—Ç—å—Å—è —Ç.–∫ –∞–≤—Ç–æ—Ä –ª–µ–Ω–∏–≤–∞—è –∂–æ–ø–∞***')
            .setFooter("Tess bot")
            .setTimestamp();
    client.users.get(message.author.id).send({embed}).then(sentMessage => {   
            sentMessage.react('üá≠')
                .then(() => sentMessage.react('üá™'))
                    .then(() => sentMessage.react('üá±'))
                    .then(() => sentMessage.react('üáµ'))
                    .catch(console.error)
           
        });
      }
setTimeout(helpS, 2000);
    }
});

client.on('message', function(message) {
    
    if(message.content === (p + "loop")) { 
message.delete()
message.channel.send("@everyone, –¥–æ –º–∏—Ä–æ–≤–æ–≥–æ –±–æ—Å—Å–∞ –æ—Å—Ç–∞–ª–æ—Å—å **15 –º–∏–Ω—É—Ç**")
setTimeout(int, 2000)

 }

function int() {           
console.log("start TIMER")          
setTimeout(int2, 21600000)
}


function int2() {
client.users.get("405258156063850497").send("Checking Timer activated2")
setTimeout(int3, 21600000)
}


function int3() {
client.users.get("405258156063850497").send("Checking Timer activated3")
setTimeout(int4, 21600000)
}


function int4() {
client.users.get("405258156063850497").send("Checking Timer activated4")
setTimeout(int5, 21600000)
}

function int5() {
message.channel.send("@everyone, –¥–æ –º–∏—Ä–æ–≤–æ–≥–æ –±–æ—Å—Å–∞ **–æ—Å—Ç–∞–ª–æ—Å—å 15 –º–∏–Ω—É—Ç**")
client.users.get("405258156063850497").send("Reload Timer")
setTimeout(int, 6000)
}
   
});

client.on('message', message => {
if(message.content.includes('–î–æ–±—Ä—ã–π —É—Ç—Ä–æ')) {
let nn = message.author.username
message.channel.send("–î–æ–±—Ä—ã–π —É—Ç—Ä–µ—á–∫–æ, " + nn)
}
if(message.content.includes("–î–æ–±—Ä—ã–π –¥–µ–Ω—å")) {
let nn2 = message.author.username
message.channel.send("–î–æ–±—Ä—ã–π –¥–µ–Ω—ë—á–µ–∫, " + nn2)
}
if(message.content.includes("–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä")) {
let nn3 = message.author.username
message.channel.send("–î–æ–±—Ä–µ–π—à–∏–π –≤–µ—á–µ—Ä–æ—á–µ–∫, " + nn3)
}
});

client.login(process.env.BOT_SECRET);
